
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class SingleLinkedListNonCircular:
    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0

    def insert_head(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.next = self.head
            self.head = new_node
        self.size += 1

    def delete_head(self):
        if self.head is None:
            return
        if self.head == self.tail:
            self.head = None
            self.tail = None
        else:
            self.head = self.head.next
        self.size -= 1

    def print(self):
        if self.head is None:
            print("Empty")
            return
        current = self.head
        while current is not None:
            print(current.data)
            current = current.next

from SLNC import SingleLinkedListNonCircular


class StackLinkedList:
    def __init__(self):
        self.sllnc = SingleLinkedListNonCircular()

    def push(self, data):
        self.sllnc.insert_head(data)

    def top(self):
        if self.sllnc.head is None:
            return None
        return self.sllnc.head.data

    def pop(self):
        if self.sllnc.head is None:
            return None
        data = self.sllnc.head.data
        self.sllnc.delete_head()
        return data

    def clear(self):
        while self.sllnc.head is not None:
            self.sllnc.delete_head()

    def print(self):
        self.sllnc.print()

    def len(self):
        return self.sllnc.size
from SLNC import SingleLinkedListNonCircular


class StackLinkedList:
    def __init__(self):
        self.sllnc = SingleLinkedListNonCircular()

    def push(self, data):
        self.sllnc.insert_head(data)

    def top(self):
        if self.sllnc.head is None:
            return None
        return self.sllnc.head.data

    def pop(self):
        if self.sllnc.head is None:
            return None
        data = self.sllnc.head.data
        self.sllnc.delete_head()
        return data

    def clear(self):
        while self.sllnc.head is not None:
            self.sllnc.delete_head()

    def print(self):
        self.sllnc.print()

    def len(self):
        return self.sllnc.size

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class SingleLinkedListNonCircular:
    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0

    def insert_head(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.next = self.head
            self.head = new_node
        self.size += 1

    def delete_head(self):
        if self.head is None:
            return
        if self.head == self.tail:
            self.head = None
            self.tail = None
        else:
            self.head = self.head.next
        self.size -= 1

    def print(self):
        if self.head is None:
            print("Empty")
            return
        current = self.head
        while current is not None:
            print(current.data)
            current = current.next


class StackLinkedList:
    def __init__(self):
        self.sllnc = SingleLinkedListNonCircular()

    def push(self, data):
        self.sllnc.insert_head(data)

    def top(self):
        if self.sllnc.head is None:
            return None
        return self.sllnc.head.data

    def pop(self):
        if self.sllnc.head is None:
            return None
        data = self.sllnc.head.data
        self.sllnc.delete_head()
        return data

    def clear(self):
        while self.sllnc.head is not None:
            self.sllnc.delete_head()

    def print(self):
        self.sllnc.print()

    def len(self):
        return self.sllnc.size

    def add(self, data):
        self.push(data)

    def undo(self):
        if self.sllnc.head is None:
            print("Maaf stack masih kosong, anda tidka bisa undo")
            return
        self.redoo = self.pop()

    def redo(self):
        if self.redoo is None:
            print("Maaf history kosong, anda tidak bisa reedo lagi")
            return
        self.push(self.redoo)
        self.redoo = None


if __name__ == "__main__":
    stack = StackLinkedList()
    stack.print()
    stack.undo()
    print()
    stack.redo()
    print()
    stack.print()
    print()
    stack.add("Buku")
    stack.add("Pensil")
    stack.add("Krayon")
    stack.print()
    print()
    print("Undo data: ")
    stack.undo()
    stack.print()
    print()
    print("Redo data: ")
    stack.redo()
    stack.print()


